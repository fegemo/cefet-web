{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/specificity/specificity.js","spec-tabajara.min.js","scripts/classes/spec-tabajara.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","calculate","calculateSingle","SPECIFICITY","input","selectors","selector","len","results","split","push","findMatch","replaceWithPlainText","regex","typeCount","b","c","parts","type","matches","match","index","test","indexOf","substr","replace","Array","join","sort","specificity","toString","specificityArray","compare","aSpecificity","bSpecificity","isArray","filter","2","spec","SpecificatorTabajara","inputEl","outputAEl","outputBEl","outputCEl","buttonEl","this","prototype","start","specificator","onclick","value","result","innerHTML","options","document","getElementById"],"mappings":"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","file":"spec-tabajara.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var SPECIFICITY = (function() {\n\tvar calculate,\n\t\tcalculateSingle,\n\t\tcompare;\n\n\t// Calculate the specificity for a selector by dividing it into simple selectors and counting them\n\tcalculate = function(input) {\n\t\tvar selectors,\n\t\t\tselector,\n\t\t\ti,\n\t\t\tlen,\n\t\t\tresults = [];\n\n\t\t// Separate input by commas\n\t\tselectors = input.split(',');\n\n\t\tfor (i = 0, len = selectors.length; i < len; i += 1) {\n\t\t\tselector = selectors[i];\n\t\t\tif (selector.length > 0) {\n\t\t\t\tresults.push(calculateSingle(selector));\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t};\n\n\t/**\n\t * Calculates the specificity of CSS selectors\n\t * http://www.w3.org/TR/css3-selectors/#specificity\n\t *\n\t * Returns an object with the following properties:\n\t *  - selector: the input\n\t *  - specificity: e.g. 0,1,0,0\n\t *  - parts: array with details about each part of the selector that counts towards the specificity\n\t *  - specificityArray: e.g. [0, 1, 0, 0]\n\t */\n\tcalculateSingle = function(input) {\n\t\tvar selector = input,\n\t\t\tfindMatch,\n\t\t\ttypeCount = {\n\t\t\t\t'a': 0,\n\t\t\t\t'b': 0,\n\t\t\t\t'c': 0\n\t\t\t},\n\t\t\tparts = [],\n\t\t\t// The following regular expressions assume that selectors matching the preceding regular expressions have been removed\n\t\t\tattributeRegex = /(\\[[^\\]]+\\])/g,\n\t\t\tidRegex = /(#[^\\s\\+>~\\.\\[:]+)/g,\n\t\t\tclassRegex = /(\\.[^\\s\\+>~\\.\\[:]+)/g,\n\t\t\tpseudoElementRegex = /(::[^\\s\\+>~\\.\\[:]+|:first-line|:first-letter|:before|:after)/gi,\n\t\t\t// A regex for pseudo classes with brackets - :nth-child(), :nth-last-child(), :nth-of-type(), :nth-last-type(), :lang()\n\t\t\tpseudoClassWithBracketsRegex = /(:[\\w-]+\\([^\\)]*\\))/gi,\n\t\t\t// A regex for other pseudo classes, which don't have brackets\n\t\t\tpseudoClassRegex = /(:[^\\s\\+>~\\.\\[:]+)/g,\n\t\t\telementRegex = /([^\\s\\+>~\\.\\[:]+)/g;\n\n\t\t// Find matches for a regular expression in a string and push their details to parts\n\t\t// Type is \"a\" for IDs, \"b\" for classes, attributes and pseudo-classes and \"c\" for elements and pseudo-elements\n\t\tfindMatch = function(regex, type) {\n\t\t\tvar matches, i, len, match, index, length;\n\t\t\tif (regex.test(selector)) {\n\t\t\t\tmatches = selector.match(regex);\n\t\t\t\tfor (i = 0, len = matches.length; i < len; i += 1) {\n\t\t\t\t\ttypeCount[type] += 1;\n\t\t\t\t\tmatch = matches[i];\n\t\t\t\t\tindex = selector.indexOf(match);\n\t\t\t\t\tlength = match.length;\n\t\t\t\t\tparts.push({\n\t\t\t\t\t\tselector: input.substr(index, length),\n\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tlength: length\n\t\t\t\t\t});\n\t\t\t\t\t// Replace this simple selector with whitespace so it won't be counted in further simple selectors\n\t\t\t\t\tselector = selector.replace(match, Array(length + 1).join(' '));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Replace escaped characters with plain text, using the \"A\" character\n\t\t// https://www.w3.org/TR/CSS21/syndata.html#characters\n\t\t(function() {\n\t\t\tvar replaceWithPlainText = function(regex) {\n\t\t\t\t\tvar matches, i, len, match;\n\t\t\t\t\tif (regex.test(selector)) {\n\t\t\t\t\t\tmatches = selector.match(regex);\n\t\t\t\t\t\tfor (i = 0, len = matches.length; i < len; i += 1) {\n\t\t\t\t\t\t\tmatch = matches[i];\n\t\t\t\t\t\t\tselector = selector.replace(match, Array(match.length + 1).join('A'));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t// Matches a backslash followed by six hexadecimal digits followed by an optional single whitespace character\n\t\t\t\tescapeHexadecimalRegex = /\\\\[0-9A-Fa-f]{6}\\s?/g,\n\t\t\t\t// Matches a backslash followed by fewer than six hexadecimal digits followed by a mandatory single whitespace character\n\t\t\t\tescapeHexadecimalRegex2 = /\\\\[0-9A-Fa-f]{1,5}\\s/g,\n\t\t\t\t// Matches a backslash followed by any character\n\t\t\t\tescapeSpecialCharacter = /\\\\./g;\n\n\t\t\treplaceWithPlainText(escapeHexadecimalRegex);\n\t\t\treplaceWithPlainText(escapeHexadecimalRegex2);\n\t\t\treplaceWithPlainText(escapeSpecialCharacter);\n\t\t}());\n\n\t\t// Remove the negation psuedo-class (:not) but leave its argument because specificity is calculated on its argument\n\t\t(function() {\n\t\t\tvar regex = /:not\\(([^\\)]*)\\)/g;\n\t\t\tif (regex.test(selector)) {\n\t\t\t\tselector = selector.replace(regex, '     $1 ');\n\t\t\t}\n\t\t}());\n\n\t\t// Remove anything after a left brace in case a user has pasted in a rule, not just a selector\n\t\t(function() {\n\t\t\tvar regex = /{[^]*/gm,\n\t\t\t\tmatches, i, len, match;\n\t\t\tif (regex.test(selector)) {\n\t\t\t\tmatches = selector.match(regex);\n\t\t\t\tfor (i = 0, len = matches.length; i < len; i += 1) {\n\t\t\t\t\tmatch = matches[i];\n\t\t\t\t\tselector = selector.replace(match, Array(match.length + 1).join(' '));\n\t\t\t\t}\n\t\t\t}\n\t\t}());\n\n\t\t// Add attribute selectors to parts collection (type b)\n\t\tfindMatch(attributeRegex, 'b');\n\n\t\t// Add ID selectors to parts collection (type a)\n\t\tfindMatch(idRegex, 'a');\n\n\t\t// Add class selectors to parts collection (type b)\n\t\tfindMatch(classRegex, 'b');\n\n\t\t// Add pseudo-element selectors to parts collection (type c)\n\t\tfindMatch(pseudoElementRegex, 'c');\n\n\t\t// Add pseudo-class selectors to parts collection (type b)\n\t\tfindMatch(pseudoClassWithBracketsRegex, 'b');\n\t\tfindMatch(pseudoClassRegex, 'b');\n\n\t\t// Remove universal selector and separator characters\n\t\tselector = selector.replace(/[\\*\\s\\+>~]/g, ' ');\n\n\t\t// Remove any stray dots or hashes which aren't attached to words\n\t\t// These may be present if the user is live-editing this selector\n\t\tselector = selector.replace(/[#\\.]/g, ' ');\n\n\t\t// The only things left should be element selectors (type c)\n\t\tfindMatch(elementRegex, 'c');\n\n\t\t// Order the parts in the order they appear in the original selector\n\t\t// This is neater for external apps to deal with\n\t\tparts.sort(function(a, b) {\n\t\t\treturn a.index - b.index;\n\t\t});\n\n\t\treturn {\n\t\t\tselector: input,\n\t\t\tspecificity: '0,' + typeCount.a.toString() + ',' + typeCount.b.toString() + ',' + typeCount.c.toString(),\n\t\t\tspecificityArray: [0, typeCount.a, typeCount.b, typeCount.c],\n\t\t\tparts: parts\n\t\t};\n\t};\n\n\t/**\n\t * Compares two CSS selectors for specificity\n\t * Alternatively you can replace one of the CSS selectors with a specificity array\n\t *\n\t *  - it returns -1 if a has a lower specificity than b\n\t *  - it returns 1 if a has a higher specificity than b\n\t *  - it returns 0 if a has the same specificity than b\n\t */\n\tcompare = function(a, b) {\n\t\tvar aSpecificity,\n\t\t\tbSpecificity,\n\t\t\ti;\n\n\t\tif (typeof a ==='string') {\n\t\t\tif (a.indexOf(',') !== -1) {\n\t\t\t\tthrow 'Invalid CSS selector';\n\t\t\t} else {\n\t\t\t\taSpecificity = calculateSingle(a)['specificityArray'];\n\t\t\t}\n\t\t} else if (Array.isArray(a)) {\n\t\t\tif (a.filter(function(e) { return (typeof e === 'number'); }).length !== 4) {\n\t\t\t\tthrow 'Invalid specificity array';\n\t\t\t} else {\n\t\t\t\taSpecificity = a;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow 'Invalid CSS selector or specificity array';\n\t\t}\n\n\t\tif (typeof b ==='string') {\n\t\t\tif (b.indexOf(',') !== -1) {\n\t\t\t\tthrow 'Invalid CSS selector';\n\t\t\t} else {\n\t\t\t\tbSpecificity = calculateSingle(b)['specificityArray'];\n\t\t\t}\n\t\t} else if (Array.isArray(b)) {\n\t\t\tif (b.filter(function(e) { return (typeof e === 'number'); }).length !== 4) {\n\t\t\t\tthrow 'Invalid specificity array';\n\t\t\t} else {\n\t\t\t\tbSpecificity = b;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow 'Invalid CSS selector or specificity array';\n\t\t}\n\n\t\tfor (i = 0; i < 4; i += 1) {\n\t\t\tif (aSpecificity[i] < bSpecificity[i]) {\n\t\t\t\treturn -1;\n\t\t\t} else if (aSpecificity[i] > bSpecificity[i]) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t};\n\n\treturn {\n\t\tcalculate: calculate,\n\t\tcompare: compare\n\t};\n}());\n\n// Export for Node JS\nif (typeof exports !== 'undefined') {\n\texports.calculate = SPECIFICITY.calculate;\n\texports.compare = SPECIFICITY.compare;\n}\n",null,"var spec = require('specificity'),\n\n    SpecificatorTabajara = function(inputEl, outputAEl, outputBEl,\n      outputCEl, buttonEl) {\n      this.inputEl = inputEl;\n      this.outputAEl = outputAEl;\n      this.outputBEl = outputBEl;\n      this.outputCEl = outputCEl;\n      this.buttonEl = buttonEl;\n    };\n\n// attaches the event handlers\nSpecificatorTabajara.prototype.start = function() {\n  var specificator = this;\n  this.buttonEl.onclick = function() {\n    specificator.calculate();\n  };\n};\n\nSpecificatorTabajara.prototype.calculate = function() {\n  // gets the value from the input\n  var input = this.inputEl.value,\n      result = spec.calculate(input)[0],\n      specificity;\n\n  if (result && result.specificity) {\n    result = result.specificity.split(',');\n  } else {\n    result = [0, 0, 0, 0];\n  }\n\n  // sets the value of the 3 outputs\n  this.outputAEl.innerHTML = result[1];\n  this.outputBEl.innerHTML = result[2];\n  this.outputCEl.innerHTML = result[3];\n};\n\n\nvar options = {\n  input: 'spec-tabajara-input',\n  output: [\n    'spec-tabajara-output-a',\n    'spec-tabajara-output-b',\n    'spec-tabajara-output-c'],\n  button: 'spec-tabajara-button'\n  },\n  inputEl = document.getElementById(options.input);\n\nif (inputEl) {\n  new SpecificatorTabajara(\n    inputEl,\n    document.getElementById(options.output[0]),\n    document.getElementById(options.output[1]),\n    document.getElementById(options.output[2]),\n    document.getElementById(options.button)\n  ).start();\n}\n"]}