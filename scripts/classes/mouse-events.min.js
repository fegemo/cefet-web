(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
let mouseEventsEl = document.querySelector('#mouse-events')

mouseEventsEl.querySelectorAll('li').forEach(triggeredEl => {
  // recupera o elemento onde vamos escrever que o evento foi disparado
  // (i.e., o <strong></strong>)
  let outputEl = triggeredEl.querySelector('strong')

  // remove o que quer que estivesse dentro dos <strong></strong>
  outputEl.innerHTML = ''
  outputEl.tiraImagemTimerId = []
  outputEl.classList.add('triggered-event')

  // determina de qual evento este li se trata (olha para o <code></code>)
  let evento = triggeredEl.querySelector('code').innerHTML

  // coloca o evento no li
  triggeredEl.addEventListener(evento, () => {

    // interrompe um possÃ­vel timeout que poderia jÃ¡ estar correndo para o
    // anÃºncio deste evento
    outputEl.tiraImagemTimerId.forEach(clearTimeout)

    // coloca uma imagem nesse elemento
    outputEl.innerHTML = 'ðŸ“¢'
    outputEl.classList.add('active')


    // registra uma callback para retirar a imagem
    outputEl.tiraImagemTimerId.push(setTimeout(() => {
      outputEl.classList.remove('active')
    }, 0))
    outputEl.tiraImagemTimerId.push(setTimeout(() => {
      outputEl.innerHTML = ''
    }, 2000))

  })
})

},{}]},{},[1])

//# sourceMappingURL=mouse-events.min.js.map
